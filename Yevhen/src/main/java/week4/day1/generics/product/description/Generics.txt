1. Создайте классы в соответсвии с uml диаграмой (diagram)
2. В main классе:
    создать по одному экземпляр классов:
    Camera camera = new Camera("Camera", 1200, 15);
    Phone phone = new Phone("IPhone", 800, "iOS7");
    и добавить их в

    Container<Product> container = new Container<>();
            container.add(camera);
            container.add(phone);

             -> RUN

3. Сделать так, чтобы контейнер принимал только класс Product  -> RUN
4. Сделать так, чтобы контейнер принимал только класс Product & Comparable<Product>  -> RUN
5. Унаследуйте класс Camera от Comparable<Camera> (реализация не нужна)-> RUN
6. Унаследуйте класс Product от Comparable<Product> (реализация не нужна, только сигнатура) -> RUN

*****************************************************************************

7. Создайте класс Utils и реализуйте в нем метод:

    public static boolean find(List<Product> products, Product product)

8. В main классе:
       создать по одному экземпляр классов:
       Camera camera = new Camera("Camera", 1200, 15);
       Phone phone = new Phone("IPhone", 800, "iOS7");

        List<Camera> cameras = new ArrayList<>();
        List<Phone> phones = new ArrayList<>();

        Визвать метод:
               Utils.find(cameras, camera);
               Utils.find(phones, phone);

9. Релизовать метод find таким образом, что бы он мог приникать всех, кто наследуется от класса Product. (see find.txt)

  -> RUN_2

*****************************************************************************

10. Напишите метод копирования двух списков:

    public static void copy(List<...> src, List<...> dest){
          for (Product product : src) {
              dest.add(product);
          }
    }

    таким образом, чтобы можно было сделать следующие копирование

            List<Product> products = new ArrayList<>();
            List<Camera> cameras = new ArrayList<>();
            List<Phone> phones = new ArrayList<>();

            List<Object> list = new ArrayList<>();

            Utils.copy(cameras, products);
            Utils.copy(cameras, list);
            Utils.copy(cameras, cameras);

            Utils.copy(cameras, phones); - NOT allowed
            Utils.copy(products, phones); - NOT allowed

            -> RUN_3

*****************************************************************************


Goal:

Camera camera = new Camera("Camera", 1200, 15);

Phone phone = new Phone("IPhone", 800, "iOS7");
Phone phone2 = new Phone("IPhone", 500, "iOS6");

phone.compareTo(phone2); - allowed
phone.compareTo(camera); - NOT allowed

11. В класс Product добавьте метод сравнения по цене:

    abstract void subCompare(Product p);

    добавьте реализацию в подклассы.

12. Сделать так, чтобы в медод subCompare принимал конкретный продукт (Camera / Phone) see recursiveClassExtension.txt.

